#*args   Non-keyword arguments
'''
•	The special syntax *args in function definitions in python is used to pass a variable number of arguments to a function.'''

def myfunc(*argv):
    for i in argv:
        print(i)

myfunc("hello","welcome","to","python")


# **kwargs    keyword arguments
'''
•	The special syntax **kwargs in function definitions in python is used to pass a keyworded, variable-length argument list. We use the name kwargs with the double star. 
'''

def myfunc(**kwargs):
    for key,value in kwargs.items():
        print("%s==%s"%(key,value))

myfunc(first="hello",second="to",third="python")


#keyword argument with extra argument
def myfunc(arg1,**kwargs):
    for key,value in kwargs.items():
        print("%s==%s"%(key,value))
    print(arg1)

myfunc("hi",first="hello",second="to",third="python")

'''
using *args & **kwargs in same function
'''

def myfunc(arg1,arg2,arg3):
    print(arg1)
    print(arg2)
    print(arg3)

args=("hello","to","python")
myfunc(*args)
kwargs={"arg1":"java","arg2":"c","arg3":"c++"}
myfunc(**kwargs)


'''
using *args & **kwargs to call function
'''
def myfunc(*args,**kwargs):
    print("args: ",args)
    print("kwargs: ",kwargs)

myfunc("hello","to","python",first="hello",second="to",third="python")


#Anonymous function or lambda 

def cube(x):      #user-defined function
    return x*x*x

print(cube(7))


cube_x=lambda x,y:x*y   #lambda function
print(cube_x(5,6))




'''
Find the True Equations

In this you have to give a list containing equations, with each equation written as a string. 

example:
["1+1=2", "2+2=3", "5*5=10", "3/3=1"]
If you do the math, you'll see that the equations "1+1=2" and "3/3=1" are actually true while "2+2=3" and "5*5=10" are false.
Write a function which, given a list of equations as above, returns only the true equations. For instance, 
for the example above the output should be:
["1+1=2", "3/3=1"]
Examples
true_equations(["2*2=4"]) ➞ ["2*2=4"]

true_equations(["1+1=3", "3-1=1"]) ➞ []

'''

def true_equations(lst):
    list1=[]
    for i in lst:
        eq=i.split('=')
        if eval(eq[0])==eval(eq[1]):
            list1.append(i)
    return list1

lst=["11+10=21", "2+20=3", "5*5=10", "3/3=1"]
print(true_equations(lst))

#2
def true_equations(lst):
    return [eq for eq in lst if eval(eq.split("=")[0])==int(eq.split("=")[-1])]


lst=["11+10=21", "2+20=3", "5*5=10", "3/3=1"]
print(true_equations(lst))
