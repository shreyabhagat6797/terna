'''
Write a python program to find and display the product of three positive integer values based on the rule mentioned below:

It should display the product of the three values except when one of the integer value is 7. 
In that case, 7 should not be included in the product and the values to its left also should not be included.
If there is only one value to be considered, display that value itself. If no values can be included in the product, display -1.

Note: Assume that if 7 is one of the positive integer values, then it will occur only once. Refer the sample I/O given below.
Sample Input	Expected Output
1, 5, 3	             15
3, 7, 8	             8
7, 4, 3	             12
1, 5, 7	            -1

'''


'''def find_product(num1,num2,num3):
    list1=[]
    list1.extend([num1,num2,num3])
    product=1
    if 7 in list1:
        i=list1.index(7)
        if i is (len(list1)-1):
            return -1
    else:
        i=-1
    for index in range(i+1,len(list1)):
        product=product*list1[index]
    return product

product=find_product(2,7,6)
print(product)'''



'''
Write a python function to check whether three given numbers can form the sides of a triangle. 
Hint: Three numbers can be the sides of a triangle if none of the numbers are greater than or equal to the sum of the other two numbers.
'''

def triangle(num1,num2,num3):
    l=[num1,num2,num3]
    flag=True
    #if a>=b+c or b>=a+c or c>=a+b
    #triangle can't formed
    #else
    #triangle can form
    for n in l:
        if n>=l[(l.index(n)+1)%3]+l[(l.index(n)+2)%3]:  
            flag=False
            #print("triangle can't formed")
            break    
    return flag
    #print("triangle can form")

print(triangle(3,3,5))
print(triangle(2,4,6))


'''
Given two strings, return a string containing only the letters shared between the two.
Examples
shared_letters("house", "home") ➞ "eho"

shared_letters("Micky", "mouse") ➞ "m"

shared_letters("house", "villa") ➞ ""
•	If none of the letters are shared, return an empty string.
•	The function should be case insensitive (e.g. comparing A and a should return a).
•	Sort the resulting string alphabetically before returning it.

'''

'''def shared_letters(n1,n2):
    val=[]
    for i in n1.lower():
        if i in n2.lower():
            val+=i
    val.sort()
    val="".join(val)
    return val

print(shared_letters("house", "home"))'''
